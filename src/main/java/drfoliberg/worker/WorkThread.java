package main.java.drfoliberg.worker;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import main.java.drfoliberg.common.Service;
import main.java.drfoliberg.common.exceptions.MissingDecoderException;
import main.java.drfoliberg.common.exceptions.MissingFfmpegException;
import main.java.drfoliberg.common.exceptions.WorkInterruptedException;
import main.java.drfoliberg.common.network.Cause;
import main.java.drfoliberg.common.task.video.VideoEncodingTask;
import main.java.drfoliberg.common.utils.FileUtils;

public class WorkThread extends Service {

	private static String OS = System.getProperty("os.name").toLowerCase();
	private VideoEncodingTask task;
	WorkThreadListener listener;
	Process process;

	File taskFinalFolder;
	File absoluteSharedDir;
	File taskTempOutputFile;
	File taskTempOutputFolder;

	public WorkThread(VideoEncodingTask t, WorkThreadListener listener) {
		task = t;
		this.listener = listener;
	}

	private void createDirs() {

		if (!taskFinalFolder.exists()) {
			taskFinalFolder.mkdirs();
			FileUtils.givePerms(taskFinalFolder, false);
		}
		taskTempOutputFolder = FileUtils.getFile(listener.getConfig().getTempEncodingFolder(), task.getJobId(),
				String.valueOf(task.getTaskId()));
		if (!taskTempOutputFolder.exists()) {
			taskTempOutputFolder.mkdirs();
			FileUtils.givePerms(taskTempOutputFolder, false);
		}
		// remove any previous temp files for this part
		cleanTempPart();

	}

	/**
	 * Convert ms count to hh:mm:ss.xxx format
	 * 
	 * @param ms
	 *            The ms count to convert
	 * @return The string in the right format for ffmpeg/libav
	 */
	private String getDurationString(long ms) {
		int hours = (int) (ms / (3600 * 1000));
		int remaining = (int) (ms - hours * 3600 * 1000);
		int minutes = (int) (remaining / (60 * 1000));

		remaining -= minutes * 60 * 1000;

		int seconds = remaining / 1000;
		int decimals = remaining % 1000;
		return String.format("%d:%d:%d.%d", hours, minutes, seconds, decimals);
	}

	private static boolean isWindows() {
		return (OS.indexOf("win") >= 0);
	}

	public void encodePass(String startTimeStr, String durationStr) throws MissingFfmpegException,
			MissingDecoderException, WorkInterruptedException {

		absoluteSharedDir = new File(listener.getConfig().getAbsoluteSharedFolder());
		task.setTimeStarted(System.currentTimeMillis());

		File inputFile = new File(absoluteSharedDir, task.getSourceFile());

		// Get parameters from the task and bind parameters to process
		try {
			String[] baseArgs = new String[] { "ffmpeg", "-ss", startTimeStr, "-t", durationStr, "-i",
					inputFile.getAbsolutePath(), "-sn", "-force_key_frames", "0", "-an", "-c:v", "libx264" };
			ArrayList<String> ffmpegArgs = new ArrayList<>();
			// Add base args to process builder
			Collections.addAll(ffmpegArgs, baseArgs);

			ffmpegArgs.addAll(task.getRateControlArgs());
			ffmpegArgs.addAll(task.getPresetArg());

			// output file and pass arguments
			String outFile = taskTempOutputFile.getAbsoluteFile().toString();
			if (task.getPasses() > 1) {
				// Add pass arguments
				ffmpegArgs.add("-pass");
				ffmpegArgs.add(String.valueOf(task.getCurrentPass()));
				if (task.getCurrentPass() != task.getPasses()) {
					ffmpegArgs.add("-f");
					ffmpegArgs.add("rawvideo");
					ffmpegArgs.add("-y");
					// Change output file to null
					if (isWindows()) {
						outFile = "NUL";
					} else {
						outFile = "/dev/null";
					}
				}
			}
			ffmpegArgs.add(outFile);

			// build the process
			ProcessBuilder pb = new ProcessBuilder(ffmpegArgs);
			System.out.println(pb.command().toString());

			// Start process in task output directory (log and mtrees pass files generated by ffmpeg)
			pb.directory(taskTempOutputFolder);
			process = pb.start();

		} catch (IOException e) {
			e.printStackTrace();
			throw new MissingFfmpegException();
		}

		// Read from ffmpeg stderr to get progress
		InputStream stderr = process.getErrorStream();
		Scanner s = new Scanner(stderr);
		String line = "";

		Pattern currentFramePattern = Pattern.compile("frame=\\s*([0-9]*)");
		Pattern fpsPattern = Pattern.compile("fps=\\s*([0-9]*)");
		Pattern missingDecoder = Pattern.compile("Error while opening encoder for output stream");
		try {
			while (s.hasNext() && !close) {
				// TODO better scanning (avoid regexing the same line multiple times if result)
				line = s.nextLine();
				Matcher m = currentFramePattern.matcher(line);

				if (m.find()) {
					long currentFrame = Long.parseLong(m.group(1));
					task.setFramesCompleted(currentFrame);
					System.err.printf("frame: %d out of %d (%f%%) \n", currentFrame, task.getEstimatedFramesCount(),
							task.getProgress());
				}
				m = fpsPattern.matcher(line);
				if (m.find()) {
					float fps = Float.parseFloat(m.group(1));
					task.setFps(fps);
					System.err.printf("fps: %s \n", fps);
				}
				m = missingDecoder.matcher(line);
				if (m.find()) {
					s.close();
					System.err.println("Missing decoder !");
					throw new MissingDecoderException();
				}

			}
		} catch (NullPointerException e) {
			// If task is interrupted, current task might become null
			if (!close) {
				// If thread is not stopped and a null pointer occurs, it is not normal
				e.printStackTrace();
				close = true;
			}
		}
		s.close();

		if (close) {
			System.err.println("Destroying ffmpeg process");
			process.destroy();
			throw new WorkInterruptedException();
		}
	}

	@Override
	public void run() {
		boolean success = false;
		try {
			System.out.println("WORKER WORK THREAD: Executing a task!");
			// use start and duration for ffmpeg legacy support
			long durationMs = task.getEncodingEndTime() - task.getEncodingStartTime();
			String startTimeStr = getDurationString(task.getEncodingStartTime());
			String durationStr = getDurationString(durationMs);

			this.taskFinalFolder = FileUtils.getFile(listener.getConfig().getAbsoluteSharedFolder(),
					task.getOutputFile()).getParentFile();

			String extension = "mkv";
			String filename = String.format("%d.%s", task.getTaskId(), extension);

			createDirs();

			taskTempOutputFile = new File(taskTempOutputFolder, filename);

			task.setCurrentPass(1);
			while (task.getCurrentPass() <= task.getPasses()) {
				System.err.printf("Encoding pass %d of %d\n", task.getCurrentPass(), task.getPasses());
				encodePass(startTimeStr, durationStr);
				task.setCurrentPass(task.getCurrentPass() + 1);
			}

			// moveTempPartFile();
			success = transcodeToMpegTs();

		} catch (MissingFfmpegException | MissingDecoderException e) {
			listener.nodeCrash(new Cause(e, "unknown", true));
		} catch (WorkInterruptedException e) {
			System.err.println("WORKER: stopping work");
		} finally {
			if (success) {
				listener.workCompleted(task);
			} else {
				listener.workFailed(task);
			}
		}
	}

	private void cleanTempPart() {
		System.out.println("WORKER: Deleting temp task folder content.");
		if (taskTempOutputFolder.exists()) {
			try {
				FileUtils.cleanDirectory(taskTempOutputFolder);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	private boolean transcodeToMpegTs() {
		File destination = new File(absoluteSharedDir, task.getOutputFile());
		// TODO handle robust handling of progress and errors
		try {
			ProcessBuilder ffmpeg = new ProcessBuilder();
			String[] baseArgs = new String[] { "ffmpeg", "-i", taskTempOutputFile.getAbsolutePath(), "-f", "mpegts",
					"-c", "copy", "-bsf:v", "h264_mp4toannexb", destination.getAbsolutePath() };
			ArrayList<String> args = new ArrayList<>();
			Collections.addAll(args, baseArgs);
			ffmpeg.command(args);
			System.err.println(args.toString());

			Process transcoder = ffmpeg.start();
			transcoder.waitFor();
			if (transcoder.exitValue() != 0) {
				System.err.println("Transcoding from mkv to mpegts appears to have failed !");
				return false;
			}
			FileUtils.givePerms(destination, false);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
		return true;
	}
}
